# # Run from the main project directory (poetry-poems). Build ubuntu-pyenv-poems first:
# docker build -t ubuntu-pyenv-poetry -f dockerfiles/base.dockerfile .
# docker build -t poems-intro -f dockerfiles/poems_ubuntu.dockerfile .
# docker run -it --rm --name poems-intro poems-intro

FROM ubuntu-pyenv-poetry

WORKDIR /apps

ENV LC_ALL=C.UTF-8

COPY ../dist/ /apps/dist
RUN pip3 install dist/poetry-poems-0.1.0.tar.gz
# RUN pip install -i https://test.pypi.org/simple/ poetry-poems

# # Environments:
# 1) poetry env autogenerated
# 2) virtualenv
# 3) poetry env autogenerated in the project directory
RUN pyenv local 3.9.1 && poetry new BBreaker && cd BBreaker && pyenv local 3.9.1 && poetry install --no-dev --no-root
RUN pyenv local 3.8.7 && poetry new MemoryMuppets && cd MemoryMuppets && pyenv local 3.8.7 && poetry install --no-dev --no-root
RUN pyenv local 3.8.7 && poetry new venv_by_virtualenv && cd venv_by_virtualenv && poetry config --local virtualenvs.in-project true && pip install virtualenv && virtualenv .venv
RUN pyenv local 3.7.9 && poetry new venv_by_poetry && cd venv_by_poetry && poetry config --local virtualenvs.in-project true && poetry install --no-dev --no-root
RUN pyenv local 3.6.12 && poetry new venv_not_present

RUN poems --add /apps/BBreaker && poems --add /apps/MemoryMuppets && poems --add /apps/venv_by_virtualenv && poems --add /apps/venv_by_poetry
RUN mkdir not_poetry_project && echo "/apps/not_poetry_project" >> ../.poetry-poems
RUN echo "/apps/not_existent_project" >> ../.poetry-poems

# color prompt hack
RUN sed -i "s/#force_color_prompt=yes/force_color_prompt=yes/g" ~/root/.bashrc
RUN echo "source /root/.bashrc" >> /etc/bash.bashrc

CMD ["bash"]

# export PS1="\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\$\[\033[00m\] "
